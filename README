INTRODUCTION
============

This project is a sandbox aiming at demonstrating step-by-step optimizations of
stencil and image-processing algorithms on clustered many-core architectures
fitted with local memories and DMA capabilities, like the Kalray MPPA many-core
processor.

The Sobel filter is taken as example for the compute kernel, and OpenCL-C as
programming language.

This example will walk through the first GPU-friendly reference kernel, to other
more and more advanced optimizations. The goal is to highlight key methods to
obtain high performance and demonstrate each one of them on the Kalray MPPA
architecture.

CODE
====

Some main objectives:
    - Keep it as simple as possible
    - Focus on the processing part on Accelerator (OpenCL kernel *.cl)
    - Insightful comments and comprehensible coding style
    - Process some real images, like a hands-on demo

Code structure:

├── host.c
├── images
│   ├── curious_cat.png
│   └── valve_original.png
├── Makefile
├── ocl_utils.c
├── ocl_utils.h
├── png_utils.c
├── png_utils.h
├── sobel.cl
├── sobel_config.h
└── README

The most important files are 'sobel.cl' and 'host.c'. OpenCL kernels in
'sobel.cl' are structured in several chronological/incremental steps. Reader is
strongly recommended to follow those kernels step-by-step. From step 4 on,
reader should also refer to 'host.c' for the execution deployment parameters
(clEnqueueNDRangeKernel).

The performance gain is more significant on large images than on small ones,
since a certain number (dozen) of tiles per workgroup is required for the
double-buffering tiling algorithm to become efficient.

RUN
===

$ make run_hw [INPUT_IMAGE_PNG=/.../.../image.png] [OUTPUT_DISPLAY=0|1]

INPUT_IMAGE_PNG : path to user PNG image (default = /images/valve_original.png)
OUTPUT_DISPLAY  : disable/enable display of all output images (default = 1)

REFERENCES
==========

[1] Ho, Minh Quan, et al. "Improving 3D Lattice Boltzmann Method stencil with
asynchronous transfers on many-core processors." 2017 IEEE 36th International
Performance Computing and Communications Conference (IPCCC). IEEE, 2017.
https://hal.univ-grenoble-alpes.fr/hal-01652614/document

